// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	proto "gitlab.com/gitlab-org/fleeting/nesting/api/internal/proto"
)

// NestingClient is an autogenerated mock type for the NestingClient type
type NestingClient struct {
	mock.Mock
}

type NestingClient_Expecter struct {
	mock *mock.Mock
}

func (_m *NestingClient) EXPECT() *NestingClient_Expecter {
	return &NestingClient_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, in, opts
func (_m *NestingClient) Create(ctx context.Context, in *proto.CreateRequest, opts ...grpc.CallOption) (*proto.CreateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.CreateResponse
	if rf, ok := ret.Get(0).(func(context.Context, *proto.CreateRequest, ...grpc.CallOption) *proto.CreateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.CreateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.CreateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NestingClient_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type NestingClient_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.CreateRequest
//   - opts ...grpc.CallOption
func (_e *NestingClient_Expecter) Create(ctx interface{}, in interface{}, opts ...interface{}) *NestingClient_Create_Call {
	return &NestingClient_Create_Call{Call: _e.mock.On("Create",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *NestingClient_Create_Call) Run(run func(ctx context.Context, in *proto.CreateRequest, opts ...grpc.CallOption)) *NestingClient_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.CreateRequest), variadicArgs...)
	})
	return _c
}

func (_c *NestingClient_Create_Call) Return(_a0 *proto.CreateResponse, _a1 error) *NestingClient_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Delete provides a mock function with given fields: ctx, in, opts
func (_m *NestingClient) Delete(ctx context.Context, in *proto.DeleteRequest, opts ...grpc.CallOption) (*proto.DeleteResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.DeleteResponse
	if rf, ok := ret.Get(0).(func(context.Context, *proto.DeleteRequest, ...grpc.CallOption) *proto.DeleteResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.DeleteResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.DeleteRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NestingClient_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type NestingClient_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.DeleteRequest
//   - opts ...grpc.CallOption
func (_e *NestingClient_Expecter) Delete(ctx interface{}, in interface{}, opts ...interface{}) *NestingClient_Delete_Call {
	return &NestingClient_Delete_Call{Call: _e.mock.On("Delete",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *NestingClient_Delete_Call) Run(run func(ctx context.Context, in *proto.DeleteRequest, opts ...grpc.CallOption)) *NestingClient_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.DeleteRequest), variadicArgs...)
	})
	return _c
}

func (_c *NestingClient_Delete_Call) Return(_a0 *proto.DeleteResponse, _a1 error) *NestingClient_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Init provides a mock function with given fields: ctx, in, opts
func (_m *NestingClient) Init(ctx context.Context, in *proto.InitRequest, opts ...grpc.CallOption) (*proto.InitResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.InitResponse
	if rf, ok := ret.Get(0).(func(context.Context, *proto.InitRequest, ...grpc.CallOption) *proto.InitResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.InitResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.InitRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NestingClient_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type NestingClient_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.InitRequest
//   - opts ...grpc.CallOption
func (_e *NestingClient_Expecter) Init(ctx interface{}, in interface{}, opts ...interface{}) *NestingClient_Init_Call {
	return &NestingClient_Init_Call{Call: _e.mock.On("Init",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *NestingClient_Init_Call) Run(run func(ctx context.Context, in *proto.InitRequest, opts ...grpc.CallOption)) *NestingClient_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.InitRequest), variadicArgs...)
	})
	return _c
}

func (_c *NestingClient_Init_Call) Return(_a0 *proto.InitResponse, _a1 error) *NestingClient_Init_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// List provides a mock function with given fields: ctx, in, opts
func (_m *NestingClient) List(ctx context.Context, in *proto.ListRequest, opts ...grpc.CallOption) (*proto.ListResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.ListResponse
	if rf, ok := ret.Get(0).(func(context.Context, *proto.ListRequest, ...grpc.CallOption) *proto.ListResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ListResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.ListRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NestingClient_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type NestingClient_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.ListRequest
//   - opts ...grpc.CallOption
func (_e *NestingClient_Expecter) List(ctx interface{}, in interface{}, opts ...interface{}) *NestingClient_List_Call {
	return &NestingClient_List_Call{Call: _e.mock.On("List",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *NestingClient_List_Call) Run(run func(ctx context.Context, in *proto.ListRequest, opts ...grpc.CallOption)) *NestingClient_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.ListRequest), variadicArgs...)
	})
	return _c
}

func (_c *NestingClient_List_Call) Return(_a0 *proto.ListResponse, _a1 error) *NestingClient_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Shutdown provides a mock function with given fields: ctx, in, opts
func (_m *NestingClient) Shutdown(ctx context.Context, in *proto.ShutdownRequest, opts ...grpc.CallOption) (*proto.ShutdownResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.ShutdownResponse
	if rf, ok := ret.Get(0).(func(context.Context, *proto.ShutdownRequest, ...grpc.CallOption) *proto.ShutdownResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ShutdownResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.ShutdownRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NestingClient_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type NestingClient_Shutdown_Call struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.ShutdownRequest
//   - opts ...grpc.CallOption
func (_e *NestingClient_Expecter) Shutdown(ctx interface{}, in interface{}, opts ...interface{}) *NestingClient_Shutdown_Call {
	return &NestingClient_Shutdown_Call{Call: _e.mock.On("Shutdown",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *NestingClient_Shutdown_Call) Run(run func(ctx context.Context, in *proto.ShutdownRequest, opts ...grpc.CallOption)) *NestingClient_Shutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.ShutdownRequest), variadicArgs...)
	})
	return _c
}

func (_c *NestingClient_Shutdown_Call) Return(_a0 *proto.ShutdownResponse, _a1 error) *NestingClient_Shutdown_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewNestingClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewNestingClient creates a new instance of NestingClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNestingClient(t mockConstructorTestingTNewNestingClient) *NestingClient {
	mock := &NestingClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
